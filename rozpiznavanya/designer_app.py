# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QLabel, QWidget, QFrame, QScrollArea
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtGui import QColor, QFont
from PyQt5.QtWidgets import QGraphicsDropShadowEffect
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtSvg import QSvgWidget
from PyQt5.QtGui import QPixmap
import threading
import json


class Ui_MainWindow(QMainWindow):
    def __init__(self, speech_recognition):
        super().__init__()
        self.speech_recognition = speech_recognition
        self.history_data = []
        self.len_write_history = []
        self.write_history = []
        self.last_history_size = 0
        with open('history.json', 'r', encoding='utf-8') as f:
            self.history_data = json.load(f)
        # self.speech_recognition.textToDoCommand(text)
        self.setupUi()

        self.setGeometry(500,150,960,600)
       
        

    def setupUi(self):
        self.MainWindow = QtWidgets.QMainWindow()
        self.MainWindow.setObjectName("MainWindow")
        self.MainWindow.setFixedSize(960,600)
        self.MainWindow.setStyleSheet("background: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, \n"
                                      "                                stop:0 #F3E8FF, stop:1 #D8B4FE);")
        
        self.centralwidget = QtWidgets.QWidget(self.MainWindow)
        self.centralwidget.setObjectName("centralwidget")




            # # Label
        self.label_active = QtWidgets.QLabel(self.centralwidget)
        self.label_active.setGeometry(QtCore.QRect(300, 30, 351, 41))
        self.label_active.setAlignment(Qt.AlignCenter)
        self.label_active.setStyleSheet("font: 20pt \"Roboto\";\n"
                                    "color: rgb(88, 28, 135);\n"
                                    "background-color: transparent;")
        self.label_active.setObjectName("label")





         # ПОЛЕ ВВОДУ
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(230, 450, 500, 48))
        self.lineEdit.setPlaceholderText("Введіть команду вручну...")
        self.lineEdit.setFocusPolicy(Qt.ClickFocus)
        self.lineEdit.setFont(QFont("Roboto", 14))  # Шрифт
        
        
        self.lineEdit.setStyleSheet("""
            QLineEdit {
                background-color: rgb(243, 244, 246);
                border-radius: 10px;
                padding: 5px 45px 5px 10px;
                font-size: 16px;
                border: 1px solid #e5e7eb;                         
            }
            QLineEdit:focus {
                border: 2px solid #a855f7;  /* Бордер з'являється при фокусі */
                background-color: #faf5ff;  /* Легка зміна кольору */
            }
        """)
        
        
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        shadow5 = QGraphicsDropShadowEffect()
        shadow5.setBlurRadius(15)  # Розмиття
        shadow5.setOffset(0, 4)  # Зміщення тіні (по X та Y)
        shadow5.setColor(QColor(0, 0, 0, 30))  # Колір тіні (чорний з прозорістю)
        self.lineEdit.setGraphicsEffect(shadow5)






        
        # КНОПКА ДЛЯ НАДСИЛАННЯ
        self.but_send = QtWidgets.QPushButton(self.centralwidget)
        self.but_send.setGeometry(QtCore.QRect(690, 460, 30, 30))
        self.but_send.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.but_send.setStyleSheet("""
			QPushButton {
				background-color: rgb(243, 244, 246);
                border-radius: 5px;
        	}
            QPushButton:hover {
                background-color: #c0c1c3;  
                                
            }                    
		""")
        self.but_send.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icon/send_regular_icon.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.but_send.setIcon(icon4)
        self.but_send.setObjectName("but_send")

        self.but_send.clicked.connect(self.get_text_from_but_send)
        self.saved_text = ""








        self.block = QtWidgets.QWidget(self.centralwidget)
        self.block.setGeometry(QtCore.QRect(230, 450, 500, 48))
        self.block.setStyleSheet("""
            QWidget {
                background-color: rgba(123, 123, 123, 0.2);
                border-radius: 5px;           
                }
        """)






        # КНОПКА ЗАПУСКУ
        self.but_start = QtWidgets.QPushButton(self.centralwidget)
        self.but_start.setGeometry(QtCore.QRect(390, 310, 64, 64))
        self.but_start.setStyleSheet("""
			QPushButton {
				background-color: #c084fc;
				border-radius: 5px;
				border: 1px solid #e1e6ef;
			}
			QPushButton:hover {
                background-color: #a855f7;
									
			}
	    """)
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(15)  # Розмиття
        shadow.setOffset(0, 4)  # Зміщення тіні (по X та Y)
        shadow.setColor(QColor(0, 0, 0, 30))  # Колір тіні (чорний з прозорістю)
        self.but_start.setGraphicsEffect(shadow)
        
        self.but_start.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon/play_regular_icon.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.but_start.setIcon(icon)
        self.but_start.setIconSize(QtCore.QSize(20, 20))
        self.but_start.setObjectName("but_start")
        self.but_start.clicked.connect(self.on_click_but_start)
        self.is_on_but_start = False 
        self.on_click_but_start()






                # ІКОНКА
        self.image_label = QLabel(self.centralwidget)  # Створюємо новий QLabel
        self.image_label.setGeometry(370, 80, 200, 200)  # Встановлюємо розмір та позицію
        pixmap = QPixmap('icon/zefir.png')  # Завантажуємо зображення
        self.image_label.setPixmap(pixmap)  # Встановлюємо зображення в QLabel
        self.image_label.setAlignment(Qt.AlignCenter)
        shadow_i = QGraphicsDropShadowEffect()
        shadow_i.setBlurRadius(50)  # Розмиття
        shadow_i.setOffset(0, 4)  # Зміщення тіні (по X та Y)
        shadow_i.setColor(QColor(0, 0, 0, 100))  # Колір тіні (чорний з прозорістю)
        self.image_label.setGraphicsEffect(shadow_i)

        self.image_label.setScaledContents(True)
        self.image_label.setStyleSheet("""
			QLabel {
				background-color: transparent;
			}
        """)


       





        # КНОПКА МІКРОФОНУ
        self.but_micro = QtWidgets.QPushButton(self.centralwidget)
        self.but_micro.setGeometry(QtCore.QRect(490, 310, 64, 64))
        self.but_micro.setStyleSheet("""
			QPushButton {
				background-color: #c084fc;
				border-radius: 5px;
				border: 1px solid #e1e6ef;
			}
			QPushButton:hover {
                background-color: #a855f7;
									
			}
        """)
        shadow2 = QGraphicsDropShadowEffect()
        shadow2.setBlurRadius(15)  # Розмиття
        shadow2.setOffset(0, 4)  # Зміщення тіні (по X та Y)
        shadow2.setColor(QColor(0, 0, 0, 30))  # Колір тіні (чорний з прозорістю)
        self.but_micro.setGraphicsEffect(shadow2)
        self.but_micro.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icon/mic_on_regular_icon.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.but_micro.setIcon(icon1)
        self.but_micro.setIconSize(QtCore.QSize(22, 22))
        self.but_micro.setObjectName("but_micro")
        self.but_micro.clicked.connect(self.on_click_but_micro)
        self.is_on_but_micro = False 
        self.on_click_but_micro()



        # ВІКНО НАЛАШТУВАНЬ
        self.set_window = QtWidgets.QWidget(self.centralwidget)
        self.set_window.setGeometry(QtCore.QRect(30, 120, 220, 450))
        self.set_window # Виводимо віджет на передній план
        # self.set_window.raise_()
        self.set_window.setStyleSheet("""
			QWidget {
				background-color: #d1d5db;
				border-radius: 10px;
				border: 1px solid #d1d5db;
			}
		""")
        
        self.set_window.hide()
        
        self.text_set = QtWidgets.QLabel("Налаштування", self.set_window)
        self.text_set.setStyleSheet("""
			QWidget {
				background-color: transparent;
				color: #581c87;
                font: 12pt Roboto
			}
		""")
        self.text_set.move(10, 10)

        self.checkbox = QtWidgets.QCheckBox("", self.set_window)  # Пробіл для відступу
        self.checkbox.move(170, 48)
        self.checkbox.setStyleSheet("""
            QCheckBox {
                font-size: 16px;
                color: white;
                padding: 5px;
                border-radius: 5px;
                                    
                
            }                    
            /* Відключаємо стандартний індикатор */
            QCheckBox::indicator {
                    width: 13px;
                    height: 13px;
                    border: 2px solid #581c87;  
                    border-radius: 4px;
                    background-color: #f3f4f6;
            }
                                    
            QCheckBox::indicator:checked {
                background-color: #f3f4f6;
                image: url(icon/checkmark_regular_icon.svg);
            }
            QCheckBox::indicator:checked:hover {
                background-color: #c0c1c3;
                
            }
            QCheckBox::indicator:unchecked:hover {
                background-color: #c0c1c3;
            }

        """)

        self.label2 = QtWidgets.QLabel("Голосовий супровід", self.set_window)
        self.label2.setStyleSheet("""
			QWidget {
				background-color: transparent;
				color: #0f172a;
                font: 9pt Roboto
			}
		""")
        self.label2.move(20, 50)

        









        # ВІКНО ІСТОРІЇ
        self.his_window = QtWidgets.QWidget(self.centralwidget)
        self.his_window.setGeometry(QtCore.QRect(685, 120, 245, 450))
        self.his_window # Виводимо віджет на передній план
        # self.his_window.raise_()
        self.his_window.setStyleSheet("""
			QWidget {
				background-color: #d1d5db;
				border-radius: 10px;
				border: 1px solid #d1d5db;
			}
		""")
        
        self.his_window.hide()

        self.text_his = QtWidgets.QLabel("Історія", self.his_window)
        self.text_his.setStyleSheet("""
			QWidget {
				background-color: transparent;
				color: #581c87;
                font: 12pt Roboto;
                text-ali
			}
		""")
        self.text_his.move(10, 10)
        self.text_his.setAlignment(Qt.AlignCenter)

        self.scroll_area = QtWidgets.QScrollArea(self.his_window)
        self.scroll_area.setGeometry(10, 45, 225, 395)  
        self.scroll_area.setWidgetResizable(True) 

        self.scroll_content = QtWidgets.QWidget()
        self.scroll_layout = QtWidgets.QVBoxLayout(self.scroll_content)  # Вертикальний Layout

        


       
        





        # КНОПКА НАЛАШТУВАННЯ 
        self.but_setting = QtWidgets.QPushButton(self.centralwidget)
        self.but_setting.setGeometry(QtCore.QRect(20, 30, 35, 40))
        self.but_setting.setStyleSheet("""
			QPushButton {
				background-color: rgb(209, 213, 219);
				border-radius: 5px;
				border: 1px solid #d1d5db;
			}
			QPushButton:hover {
                background-color: #9ca3af;
				border: 1px solid #9ca3af;					
			}
		""")
        shadow3 = QGraphicsDropShadowEffect()
        shadow3.setBlurRadius(15)  # Розмиття
        shadow3.setOffset(0, 4)  # Зміщення тіні (по X та Y)
        shadow3.setColor(QColor(0, 0, 0, 30))  # Колір тіні (чорний з прозорістю)
        self.but_setting.setGraphicsEffect(shadow3)

        self.but_setting.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icon/settings_regular_icon.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.but_setting.setIcon(icon2)
        self.but_setting.setIconSize(QtCore.QSize(20, 20))
        self.but_setting.setObjectName("but_setting")
        self.but_setting.clicked.connect(self.on_click_but_setting)
        self.is_on_but_setting = False
        self.on_click_but_setting()



        # КНОПКА ІСТОРІЯ
        self.but_history = QtWidgets.QPushButton(self.centralwidget)
        self.but_history.setGeometry(QtCore.QRect(905, 30, 35, 40))
        self.but_history.setStyleSheet("""
			QPushButton {
				background-color: rgb(209, 213, 219);
				border-radius: 5px;
				border: 1px solid #d1d5db;
			}
			QPushButton:hover {
                background-color: #9ca3af;
				border: 1px solid #9ca3af;					
			}
		""")
        shadow4 = QGraphicsDropShadowEffect()
        shadow4.setBlurRadius(15)  # Розмиття
        shadow4.setOffset(0, 4)  # Зміщення тіні (по X та Y)
        shadow4.setColor(QColor(0, 0, 0, 30))  # Колір тіні (чорний з прозорістю)
        self.but_history.setGraphicsEffect(shadow4)

        self.but_history.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icon/history_regular_icon.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.but_history.setIcon(icon3)
        self.but_history.setIconSize(QtCore.QSize(20, 20))
        self.but_history.setObjectName("but_history")
        self.but_history.clicked.connect(self.on_click_but_history)
        self.is_on_but_history = False
        self.on_click_but_history()



        self.timer = QTimer(self)
        self.timer.timeout.connect(self.check_history)  # Підключення функції до сигналу
        self.timer.start(2000) 


    
       



        # Set central widget
        self.MainWindow.setCentralWidget(self.centralwidget)

        # # Status bar
        # self.statusbar = QtWidgets.QStatusBar(self.MainWindow)
        # self.statusbar.setObjectName("statusbar")
        # self.MainWindow.setStatusBar(self.statusbar)

        # self.retranslateUi()
        # QtCore.QMetaObject.connectSlotsByName(self.MainWindow)

    def check_history(self):

        with open('history.json', 'r', encoding='utf-8') as f:
            self.history_data = json.load(f)
        for key, vallue in self.history_data.items():
            len_history_json = len(vallue)

            self.len_write_history = len(self.write_history)

            if len_history_json > self.len_write_history:

                self.write_history = vallue
        
        

                history_list = self.write_history[::-1]

                for i in reversed(range(self.scroll_layout.count())): 
                    self.scroll_layout.itemAt(i).widget().setParent(None)

                for val in history_list:
                    part_his_win = QtWidgets.QLabel()
                    part_his_win.setStyleSheet("""
                        QWidget {
                            background-color: #d1d5db;
                            border-radius: 10px;
                            border: 1px solid #d1d5db;
                        }
                    """)
                    label = QtWidgets.QLabel(f"Команда {val[0]}", part_his_win)
                    label2 = QtWidgets.QLabel(f"Час {val[1]}", part_his_win)
                    self.scroll_layout.addWidget(part_his_win)
                    self.scroll_layout.addWidget(label)
                    self.scroll_layout.addWidget(label2)

                    self.scroll_area.setWidget(self.scroll_content)
                    self.scroll_layout.update()

    def get_text_from_but_send(self):
        # Отримуємо текст з поля вводу
        self.saved_text = self.lineEdit.text()
        self.lineEdit.clear()
        if len(self.saved_text) != 0:
            self.speech_recognition.get_text(self.saved_text)
        


    def on_click_but_setting(self):
        if self.is_on_but_setting:
            self.set_window.show()
        else:
            self.set_window.hide()
        self.is_on_but_setting = not self.is_on_but_setting


    def on_click_but_history(self):
        if self.is_on_but_history:
            self.his_window.show()
        else:
            self.his_window.hide()
        self.is_on_but_history = not self.is_on_but_history





    def on_click_but_start(self):
        
        if self.is_on_but_start:
            self.status_start = False
            self.speech_recognition.START_BUT = True
            self.block.hide()
            self.label_active.setText("Активний")
            self.but_start.setStyleSheet("""
			QPushButton {
				background-color: rgba(140, 210, 205, 0.65);
                border-radius: 5px;
				border: 1px solid #e1e6ef;
			}
            QPushButton:hover {
                background-color: rgba(124, 196, 192, 0.65);
			}
	    """)
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("icon/pause_regular_icon.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.but_start.setIcon(icon)
            self.but_start.setIconSize(QtCore.QSize(20, 20))
        else:
            self.status_start = True
            self.speech_recognition.START_BUT = False
            self.block.show()
#             self.block.setStyleSheet("""
#             QWidget {
#                 background-color: rgba(123, 123, 123, 0.2);
#                 border-radius: 5px;           
#                 }
# """)
            self.label_active.setText("Не активний")
            self.but_start.setStyleSheet("""
			QPushButton {
				background-color: #c084fc;
				border-radius: 5px;
				border: 1px solid #e1e6ef;
			}
			QPushButton:hover {
                background-color: #a855f7;
									
			}
	    """)
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("icon/play_regular_icon.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off) 
            self.but_start.setIcon(icon)
            self.but_start.setIconSize(QtCore.QSize(20, 20))
        self.is_on_but_start = not self.is_on_but_start







    def on_click_but_micro(self):
        if self.is_on_but_micro:
            self.speech_recognition.MIC_IS_OFF = True
            self.but_micro.setStyleSheet("""
			QPushButton {
				background-color: rgba(230, 160, 160, 0.9);
                border-radius: 5px;
				border: 1px solid #e1e6ef;
			}
            QPushButton:hover {
                background-color: rgba(223, 146, 146, 0.9);
			}
	    """)
            icon1 = QtGui.QIcon()
            icon1.addPixmap(QtGui.QPixmap("icon/mic_off_regular_icon.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.but_micro.setIcon(icon1)
            self.but_micro.setIconSize(QtCore.QSize(22, 22))
        else:
            self.but_micro.setStyleSheet("""
			QPushButton {
				background-color: #c084fc;
				border-radius: 5px;
				border: 1px solid #e1e6ef;
			}
			QPushButton:hover {
                background-color: #a855f7;
									
			}
	    """)
            self.speech_recognition.MIC_IS_OFF = False
            icon1 = QtGui.QIcon()
            icon1.addPixmap(QtGui.QPixmap("icon/mic_on_regular_icon.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.but_micro.setIcon(icon1)
            self.but_micro.setIconSize(QtCore.QSize(22, 22))
        self.is_on_but_micro = not self.is_on_but_micro


        
    def closeEvent(self, event):
        self.speech_recognition.close_win = True

        event.accept()  # Закриває вікно



    # def retranslateUi(self):
    #     _translate = QtCore.QCoreApplication.translate
    #     self.MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
    #     self.label.setText(_translate("MainWindow", "Активний"))




        
if __name__ == "__main__":
    
    app = QtWidgets.QApplication(sys.argv)
    ui = Ui_MainWindow()
    ui.MainWindow.show()
    sys.exit(app.exec_())
